version: "3.9"

services:
  postgres:
    image: bitnami/postgresql:latest
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=projeto
    volumes:
      - postgres_data:/bitnami/postgresql
      - ./docker-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672

  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - ./data/mongo:/data/db

  cliente:
    build: ./cliente
    container_name: cliente-service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/projeto?currentSchema=cliente
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_RABBITMQ_HOST: rabbitmq
    ports:
      - 8081:8080
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 10s


  auth:
    build: ./Auth
    container_name: auth-service
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_HOST: mongo
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: auth
      SPRING_DATA_MONGODB_USERNAME: ${MONGO_USER}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGO_PASSWORD}
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      JWT_SECRET: ${JWT_SECRET}
      SPRING_RABBITMQ_HOST: rabbitmq
    ports:
      - 8080:8081
  
  conta:
    build: ./conta
    container_name: conta-service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/projeto?currentSchema=conta
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_RABBITMQ_HOST: rabbitmq
    ports:
      - 8082:8083
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 10s

  gerente:
    build: ./gerente
    container_name: gerente-service
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/projeto?currentSchema=gerente
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_RABBITMQ_HOST: rabbitmq
    ports:
      - 8083:8084
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 1
      start_period: 10s
    

  saga:
    build: ./Saga
    container_name: saga-service
    depends_on:
      rabbitmq:
        condition: service_started
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SPRING_RABBITMQ_HOST: rabbitmq
    ports:
      - 8084:8085

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      cliente:
        condition: service_healthy
      auth:
        condition: service_started
      saga:
        condition: service_started
    environment:
      CLIENTE_SERVICE: http://cliente-service:8080/clientes
      AUTH_SERVICE: http://auth-service:8081/auth
      CONTA_SERVICE: http://conta-service:8083/contas
      GERENTE_SERVICE: http://gerente-service:8084/gerentes
      SAGA_SERVICE: http://saga-service:8085/sagas
    ports:
      - 3000:3000


volumes:
  postgres_data: {}

